import os
import requests
from pyrogram import Client, filters, enums
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from urllib.parse import quote_plus
import humanize

# Configurations
API_ID = "your_api_id"
API_HASH = "your_api_hash"
BOT_TOKEN = "your_bot_token"
URL = "your_base_url"
LOG_CHANNEL = -1001234567890  # Your log channel ID, also used for movie storage

# Initialize bot
bot = Client("MovieStreamBot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

@bot.on_message(filters.command(["img", "cup", "telegraph"], prefixes="/") & filters.reply)
async def c_upload(client, message: Message):
    reply = message.reply_to_message
    
    if not reply.media:
        return await message.reply_text("Reply to a media to upload it to Cloud.")
    
    if reply.document and reply.document.file_size > 512 * 1024 * 1024:  # 512 MB
        return await message.reply_text("File size limit is 512 MB.")
    
    msg = await message.reply_text("Processing...")
    
    try:
        downloaded_media = await reply.download()
        
        if not downloaded_media:
            return await msg.edit_text("Something went wrong during download.")
        
        with open(downloaded_media, "rb") as f:
            data = f.read()
            resp = requests.post("https://envs.sh", files={"file": data})
            if resp.status_code == 200:
                await msg.edit_text(f"`{resp.text}`")
            else:
                await msg.edit_text("Something went wrong. Please try again later.")
        
        os.remove(downloaded_media)
    
    except Exception as e:
        await msg.edit_text(f"Error: {str(e)}")

@bot.on_message(filters.private & filters.command("streams"))
async def stream_start(client, message):
    msg = await client.ask(message.chat.id, "**Now send me your file/video to get stream and download link**")
    
    if not msg.media:
        return await message.reply("**Please send me supported media.**")
    
    if msg.media in [enums.MessageMediaType.VIDEO, enums.MessageMediaType.DOCUMENT]:
        file = getattr(msg, msg.media.value)
        filename = file.file_name
        filesize = humanize.naturalsize(file.file_size) 
        fileid = file.file_id
        user_id = message.from_user.id
        username = message.from_user.mention 

        log_msg = await client.send_cached_media(
            chat_id=LOG_CHANNEL,
            file_id=fileid,
        )
        
        fileName = quote_plus(filename)
        stream = f"{URL}watch/{str(log_msg.id)}?hash={fileid}"
        download = f"{URL}{str(log_msg.id)}?hash={fileid}"
     
        await log_msg.reply_text(
            text=f"**Link generated for ID #{user_id}**\n**Username:** {username}\n\n**File Name:** {fileName}",
            quote=True,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("🚀 Fast Download 🚀", url=download),
                 InlineKeyboardButton("🖥️ Watch online 🖥️", url=stream)]
            ])
        )
        
        rm = InlineKeyboardMarkup([
            [InlineKeyboardButton("sᴛʀᴇᴀᴍ 🖥", url=stream),
             InlineKeyboardButton("ᴅᴏᴡɴʟᴏᴀᴅ 📥", url=download)]
        ])
        
        msg_text = """<i><u>𝗬𝗼𝘂𝗿 𝗟𝗶𝗻𝗸 𝗚𝗲𝗻𝗲𝗿𝗮𝘁𝗲𝗱 !</u></i>\n\n<b>📂 File Name:</b> <i>{}</i>\n\n<b>📦 File Size:</b> <i>{}</i>\n\n<b>📥 Download:</b> <i>{}</i>\n\n<b>🖥 Watch:</b> <i>{}</i>\n\n<b>🚸 Note: Link won't expire till I delete it.</b>"""
        
        await message.reply_text(text=msg_text.format(filename, filesize, download, stream), quote=True, disable_web_page_preview=True, reply_markup=rm)

if __name__ == "__main__":
    bot.run()
